{ config
, lib
, pkgs
, ...
}:

with lib;

let
  cfg = config.services.bonjour-reflector;
  settingsFormat = pkgs.formats.toml { };
in
{
  options.services.bonjour-reflector = {
    enable = mkEnableOption (lib.mdDoc "bonjour-reflector");

    settings = mkOption {
      type = settingsFormat.type;
      example = literalExpression ''
        {
          net_interface = "eth0";
          devices."71:27:06:20:A7:E6" = {
            description = "Bedroom TV";
            origin_pool = 100;
            shared_pools = [ 101 103] ;
          }
          devices."01:10:B1:E1:69:98" = {
            description = "Onkyo amplifier";
            origin_pool = 100;
            shared_pools = [ 101 103 ];
          };
          devices."00:04:4B:5D:F2:D3" = {
            description = "NVidia Shield";
            origin_pool = 100;
            shared_pools = [ 101 103 ];
          };
          devices."DC:A6:32:2B:31:19" = {
            description = "Volumio bathroom";
            origin_pool = 103;
            shared_pools = [ 101 ];
          };
          vlan.100.ip_source = "192.168.100.2";
          vlan.101.ip_source = "192.168.101.2";
          vlan.103.ip_source = "192.168.103.2";
        }
      '';
      description = lib.mdDoc ''
        Configuration for bonjour-reflector, see <https://github.com/nberlee/bonjour-reflector/blob/main/docs/config.md>
        for more information.
      '';
    };

    configFile = mkOption {
      default = settingsFormat.generate "bonjour-reflector.toml" cfg.settings;
      defaultText = "A bonjour-reflector configuration file automatically generated by values from services.bonjour-reflector.*";
      type = types.path;
      description = lib.mdDoc "Path to TOML configuration file.";
    };

    package = mkOption {
      default = pkgs.bonjour-reflector;
      defaultText = literalExpression "pkgs.bonjour-reflector";
      type = types.package;
      description = lib.mdDoc "bonjour-reflector package to use.";
    };
  };

  config = mkIf cfg.enable {
    systemd.services.bonjour-reflector= {
      description = "bonjour-reflector";
      after = [ "network.target" ];
      wantedBy = [ "multi-user.target" ];
      wants = [ "network.target" ];
      startLimitIntervalSec = 30;
      startLimitBurst = 5;
      serviceConfig = {
        Restart = "on-failure";
        RestartSec = "5s";
        LimitNPROC = 512;
        LimitNOFILE = 1048576;
        DynamicUser = true;
        AmbientCapabilities = "CAP_NET_BIND_SERVICE";
        NoNewPrivileges = true;
        ExecStart = "${getBin cfg.package}/bin/bonjour-reflector -config=${cfg.configFile}";
      };
    };
  };
  meta.maintainers = with maintainers; [ jsimonetti ];
}
